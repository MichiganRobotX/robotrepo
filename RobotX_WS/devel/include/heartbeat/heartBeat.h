// Generated by gencpp from file heartbeat/heartBeat.msg
// DO NOT EDIT!


#ifndef HEARTBEAT_MESSAGE_HEARTBEAT_H
#define HEARTBEAT_MESSAGE_HEARTBEAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace heartbeat
{
template <class ContainerAllocator>
struct heartBeat_
{
  typedef heartBeat_<ContainerAllocator> Type;

  heartBeat_()
    : msgID()
    , date()
    , time()
    , latitude(0.0)
    , longitude(0.0)
    , NS()
    , EW()
    , teamID()
    , sysMode(0)
    , AUVStatus(0)
    , checksum(0)  {
    }
  heartBeat_(const ContainerAllocator& _alloc)
    : msgID(_alloc)
    , date(_alloc)
    , time(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , NS(_alloc)
    , EW(_alloc)
    , teamID(_alloc)
    , sysMode(0)
    , AUVStatus(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msgID_type;
  _msgID_type msgID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _NS_type;
  _NS_type NS;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _EW_type;
  _EW_type EW;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _teamID_type;
  _teamID_type teamID;

   typedef int32_t _sysMode_type;
  _sysMode_type sysMode;

   typedef int32_t _AUVStatus_type;
  _AUVStatus_type AUVStatus;

   typedef int32_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::heartbeat::heartBeat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heartbeat::heartBeat_<ContainerAllocator> const> ConstPtr;

}; // struct heartBeat_

typedef ::heartbeat::heartBeat_<std::allocator<void> > heartBeat;

typedef boost::shared_ptr< ::heartbeat::heartBeat > heartBeatPtr;
typedef boost::shared_ptr< ::heartbeat::heartBeat const> heartBeatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heartbeat::heartBeat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heartbeat::heartBeat_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace heartbeat

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'heartbeat': ['/home/wamv/Documents/robotrepo/RobotX_WS/src/heartbeat/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::heartbeat::heartBeat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heartbeat::heartBeat_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heartbeat::heartBeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heartbeat::heartBeat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heartbeat::heartBeat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heartbeat::heartBeat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heartbeat::heartBeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e916e349c3a6e892f5964e2d9636882";
  }

  static const char* value(const ::heartbeat::heartBeat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e916e349c3a6e89ULL;
  static const uint64_t static_value2 = 0x2f5964e2d9636882ULL;
};

template<class ContainerAllocator>
struct DataType< ::heartbeat::heartBeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heartbeat/heartBeat";
  }

  static const char* value(const ::heartbeat::heartBeat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heartbeat::heartBeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string msgID\n\
string date\n\
string time\n\
float32 latitude\n\
float32 longitude\n\
string NS\n\
string EW\n\
string teamID\n\
int32 sysMode\n\
int32 AUVStatus\n\
int32 checksum\n\
";
  }

  static const char* value(const ::heartbeat::heartBeat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heartbeat::heartBeat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgID);
      stream.next(m.date);
      stream.next(m.time);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.NS);
      stream.next(m.EW);
      stream.next(m.teamID);
      stream.next(m.sysMode);
      stream.next(m.AUVStatus);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct heartBeat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heartbeat::heartBeat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heartbeat::heartBeat_<ContainerAllocator>& v)
  {
    s << indent << "msgID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msgID);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "NS: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.NS);
    s << indent << "EW: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.EW);
    s << indent << "teamID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.teamID);
    s << indent << "sysMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sysMode);
    s << indent << "AUVStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AUVStatus);
    s << indent << "checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEARTBEAT_MESSAGE_HEARTBEAT_H
