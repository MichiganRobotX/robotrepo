// Generated by gencpp from file waypoint_follower_pid/PID.msg
// DO NOT EDIT!


#ifndef WAYPOINT_FOLLOWER_PID_MESSAGE_PID_H
#define WAYPOINT_FOLLOWER_PID_MESSAGE_PID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace waypoint_follower_pid
{
template <class ContainerAllocator>
struct PID_
{
  typedef PID_<ContainerAllocator> Type;

  PID_()
    : p(0.0)
    , i(0.0)
    , d(0.0)  {
    }
  PID_(const ContainerAllocator& _alloc)
    : p(0.0)
    , i(0.0)
    , d(0.0)  {
  (void)_alloc;
    }



   typedef float _p_type;
  _p_type p;

   typedef float _i_type;
  _i_type i;

   typedef float _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::waypoint_follower_pid::PID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint_follower_pid::PID_<ContainerAllocator> const> ConstPtr;

}; // struct PID_

typedef ::waypoint_follower_pid::PID_<std::allocator<void> > PID;

typedef boost::shared_ptr< ::waypoint_follower_pid::PID > PIDPtr;
typedef boost::shared_ptr< ::waypoint_follower_pid::PID const> PIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::waypoint_follower_pid::PID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::waypoint_follower_pid::PID_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace waypoint_follower_pid

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'waypoint_follower_pid': ['/home/wamv/Documents/robotrepo/RobotX_WS/src/waypoint_follower_pid/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_follower_pid::PID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_follower_pid::PID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waypoint_follower_pid::PID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waypoint_follower_pid::PID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_follower_pid::PID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_follower_pid::PID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::waypoint_follower_pid::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cccd09188ee638c943ed6be95f1812c9";
  }

  static const char* value(const ::waypoint_follower_pid::PID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcccd09188ee638c9ULL;
  static const uint64_t static_value2 = 0x43ed6be95f1812c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint_follower_pid::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "waypoint_follower_pid/PID";
  }

  static const char* value(const ::waypoint_follower_pid::PID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::waypoint_follower_pid::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# PID message\n\
float32 p\n\
float32 i\n\
float32 d\n\
";
  }

  static const char* value(const ::waypoint_follower_pid::PID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::waypoint_follower_pid::PID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.i);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::waypoint_follower_pid::PID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::waypoint_follower_pid::PID_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    Printer<float>::stream(s, indent + "  ", v.p);
    s << indent << "i: ";
    Printer<float>::stream(s, indent + "  ", v.i);
    s << indent << "d: ";
    Printer<float>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAYPOINT_FOLLOWER_PID_MESSAGE_PID_H
