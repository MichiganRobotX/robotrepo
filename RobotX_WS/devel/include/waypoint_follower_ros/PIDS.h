// Generated by gencpp from file waypoint_follower_ros/PIDS.msg
// DO NOT EDIT!


#ifndef WAYPOINT_FOLLOWER_ROS_MESSAGE_PIDS_H
#define WAYPOINT_FOLLOWER_ROS_MESSAGE_PIDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace waypoint_follower_ros
{
template <class ContainerAllocator>
struct PIDS_
{
  typedef PIDS_<ContainerAllocator> Type;

  PIDS_()
    : lin_pos_P(0.0)
    , lin_pos_I(0.0)
    , lin_pos_D(0.0)
    , lin_vel_P(0.0)
    , lin_vel_I(0.0)
    , lin_vel_D(0.0)
    , angular_P(0.0)
    , angular_I(0.0)
    , angular_D(0.0)  {
    }
  PIDS_(const ContainerAllocator& _alloc)
    : lin_pos_P(0.0)
    , lin_pos_I(0.0)
    , lin_pos_D(0.0)
    , lin_vel_P(0.0)
    , lin_vel_I(0.0)
    , lin_vel_D(0.0)
    , angular_P(0.0)
    , angular_I(0.0)
    , angular_D(0.0)  {
  (void)_alloc;
    }



   typedef double _lin_pos_P_type;
  _lin_pos_P_type lin_pos_P;

   typedef double _lin_pos_I_type;
  _lin_pos_I_type lin_pos_I;

   typedef double _lin_pos_D_type;
  _lin_pos_D_type lin_pos_D;

   typedef double _lin_vel_P_type;
  _lin_vel_P_type lin_vel_P;

   typedef double _lin_vel_I_type;
  _lin_vel_I_type lin_vel_I;

   typedef double _lin_vel_D_type;
  _lin_vel_D_type lin_vel_D;

   typedef double _angular_P_type;
  _angular_P_type angular_P;

   typedef double _angular_I_type;
  _angular_I_type angular_I;

   typedef double _angular_D_type;
  _angular_D_type angular_D;





  typedef boost::shared_ptr< ::waypoint_follower_ros::PIDS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint_follower_ros::PIDS_<ContainerAllocator> const> ConstPtr;

}; // struct PIDS_

typedef ::waypoint_follower_ros::PIDS_<std::allocator<void> > PIDS;

typedef boost::shared_ptr< ::waypoint_follower_ros::PIDS > PIDSPtr;
typedef boost::shared_ptr< ::waypoint_follower_ros::PIDS const> PIDSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::waypoint_follower_ros::PIDS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace waypoint_follower_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'waypoint_follower_ros': ['/home/wamv/Documents/robotrepo/RobotX_WS/src/waypoint_follower_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_follower_ros::PIDS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waypoint_follower_ros::PIDS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_follower_ros::PIDS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4a02a0cfead8995261060fd7d683381";
  }

  static const char* value(const ::waypoint_follower_ros::PIDS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4a02a0cfead8995ULL;
  static const uint64_t static_value2 = 0x261060fd7d683381ULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "waypoint_follower_ros/PIDS";
  }

  static const char* value(const ::waypoint_follower_ros::PIDS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# PIDS message\n\
float64 lin_pos_P\n\
float64 lin_pos_I\n\
float64 lin_pos_D\n\
\n\
float64 lin_vel_P\n\
float64 lin_vel_I\n\
float64 lin_vel_D\n\
\n\
float64 angular_P\n\
float64 angular_I\n\
float64 angular_D\n\
";
  }

  static const char* value(const ::waypoint_follower_ros::PIDS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lin_pos_P);
      stream.next(m.lin_pos_I);
      stream.next(m.lin_pos_D);
      stream.next(m.lin_vel_P);
      stream.next(m.lin_vel_I);
      stream.next(m.lin_vel_D);
      stream.next(m.angular_P);
      stream.next(m.angular_I);
      stream.next(m.angular_D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::waypoint_follower_ros::PIDS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::waypoint_follower_ros::PIDS_<ContainerAllocator>& v)
  {
    s << indent << "lin_pos_P: ";
    Printer<double>::stream(s, indent + "  ", v.lin_pos_P);
    s << indent << "lin_pos_I: ";
    Printer<double>::stream(s, indent + "  ", v.lin_pos_I);
    s << indent << "lin_pos_D: ";
    Printer<double>::stream(s, indent + "  ", v.lin_pos_D);
    s << indent << "lin_vel_P: ";
    Printer<double>::stream(s, indent + "  ", v.lin_vel_P);
    s << indent << "lin_vel_I: ";
    Printer<double>::stream(s, indent + "  ", v.lin_vel_I);
    s << indent << "lin_vel_D: ";
    Printer<double>::stream(s, indent + "  ", v.lin_vel_D);
    s << indent << "angular_P: ";
    Printer<double>::stream(s, indent + "  ", v.angular_P);
    s << indent << "angular_I: ";
    Printer<double>::stream(s, indent + "  ", v.angular_I);
    s << indent << "angular_D: ";
    Printer<double>::stream(s, indent + "  ", v.angular_D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAYPOINT_FOLLOWER_ROS_MESSAGE_PIDS_H
