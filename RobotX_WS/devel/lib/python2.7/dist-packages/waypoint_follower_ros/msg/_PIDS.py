# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from waypoint_follower_ros/PIDS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PIDS(genpy.Message):
  _md5sum = "a4a02a0cfead8995261060fd7d683381"
  _type = "waypoint_follower_ros/PIDS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# PIDS message
float64 lin_pos_P
float64 lin_pos_I
float64 lin_pos_D

float64 lin_vel_P
float64 lin_vel_I
float64 lin_vel_D

float64 angular_P
float64 angular_I
float64 angular_D
"""
  __slots__ = ['lin_pos_P','lin_pos_I','lin_pos_D','lin_vel_P','lin_vel_I','lin_vel_D','angular_P','angular_I','angular_D']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lin_pos_P,lin_pos_I,lin_pos_D,lin_vel_P,lin_vel_I,lin_vel_D,angular_P,angular_I,angular_D

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PIDS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lin_pos_P is None:
        self.lin_pos_P = 0.
      if self.lin_pos_I is None:
        self.lin_pos_I = 0.
      if self.lin_pos_D is None:
        self.lin_pos_D = 0.
      if self.lin_vel_P is None:
        self.lin_vel_P = 0.
      if self.lin_vel_I is None:
        self.lin_vel_I = 0.
      if self.lin_vel_D is None:
        self.lin_vel_D = 0.
      if self.angular_P is None:
        self.angular_P = 0.
      if self.angular_I is None:
        self.angular_I = 0.
      if self.angular_D is None:
        self.angular_D = 0.
    else:
      self.lin_pos_P = 0.
      self.lin_pos_I = 0.
      self.lin_pos_D = 0.
      self.lin_vel_P = 0.
      self.lin_vel_I = 0.
      self.lin_vel_D = 0.
      self.angular_P = 0.
      self.angular_I = 0.
      self.angular_D = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.lin_pos_P, _x.lin_pos_I, _x.lin_pos_D, _x.lin_vel_P, _x.lin_vel_I, _x.lin_vel_D, _x.angular_P, _x.angular_I, _x.angular_D))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.lin_pos_P, _x.lin_pos_I, _x.lin_pos_D, _x.lin_vel_P, _x.lin_vel_I, _x.lin_vel_D, _x.angular_P, _x.angular_I, _x.angular_D,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.lin_pos_P, _x.lin_pos_I, _x.lin_pos_D, _x.lin_vel_P, _x.lin_vel_I, _x.lin_vel_D, _x.angular_P, _x.angular_I, _x.angular_D))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.lin_pos_P, _x.lin_pos_I, _x.lin_pos_D, _x.lin_vel_P, _x.lin_vel_I, _x.lin_vel_D, _x.angular_P, _x.angular_I, _x.angular_D,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
